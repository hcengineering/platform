{
  "root": true,
  "env": {
    "browser": true,
    "es6": true,
    "node": true
  },
  "extends": ["standard-with-typescript", "plugin:svelte/prettier"],
  "globals": {
    "Atomics": "readonly",
    "SharedArrayBuffer": "readonly"
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2020,
    "sourceType": "module",
    "project": ["tsconfig.json"],
    "extraFileExtensions": [".svelte"]
  },
  "plugins": ["@typescript-eslint", "import"],
  "ignorePatterns": ["*.json", "node_modules/*", ".eslintrc.js"],
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [".ts"],
        "moduleDirectory": ["src", "node_modules"]
      }
    }
  },
  "overrides": [
    {
      "files": ["**/*.svelte"],
      "parser": "svelte-eslint-parser",
      "parserOptions": {
        "parser": "@typescript-eslint/parser"
      },
      "rules": {
        "@typescript-eslint/no-unused-vars": ["warn", {
          // Registered Svelte names for better component typings,
          // see https://raqueebuddinaziz.com/blog/svelte-type-events-slots-and-props/#restprops-props
          "varsIgnorePattern": "^\\$\\$(Props|Events|Slots)$"
        }],
        "@typescript-eslint/array-type": "off",
        "@typescript-eslint/promise-function-async": "off",
        "@typescript-eslint/consistent-type-imports": "off",
        "import/first": "warn",
        "import/no-duplicates": "warn",
        "import/no-mutable-exports": "off",
        "import/no-unresolved": "warn",
        "no-multiple-empty-lines": "warn",
        "no-undef-init": "off",
        "no-use-before-define": "warn",
         // This need to be enabled eventually
        "@typescript-eslint/explicit-function-return-type": "warn",
        "@typescript-eslint/strict-boolean-expressions":"warn",
        "@typescript-eslint/prefer-nullish-coalescing": "warn",
        "@typescript-eslint/no-use-before-define": "warn",
        "@typescript-eslint/no-floating-promises": "warn"
      }
    }
  ],
  "rules": {
    "svelte/no-at-html-tags": "error"
  }
}
